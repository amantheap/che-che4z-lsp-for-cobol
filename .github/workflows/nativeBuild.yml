# This is a basic workflow to help you get started with Actions

name: NativeBuild

# Controls when the workflow will run
on: workflow_dispatch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  generateNativeConfig:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 22.2.0
          native-image: true
      - name: Generate assisted configuration for GraalVM native build
        working-directory: server
        run: mvn -e -B -Pnative -Dagent=true test
      - uses: actions/upload-artifact@v3
        with:
          name: configuration
          path: server/engine/target/native/agent-output/test/*

  buildOnWindows:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
          - os: windows-latest
            platform: win32
            arch: ia32
          - os: windows-latest
            platform: win32
            arch: arm64
    runs-on: ${{ matrix.os }}
    needs: [generateNativeConfig]
    steps:
      - shell: pwsh
        run: echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV
      - uses: al-cheb/configure-pagefile-action@v1.2
        with:
          minimum-size: 16GB
          maximum-size: 16GB
          disk-root: "C:"
      - uses: actions/checkout@v3
      - name: Retrieve native build configurations
        uses: actions/download-artifact@v3
        with:
          path: configuration
          name: configuration
      - name: Add graalVM configuration to server
        run: |
          cp -rp configuration/session-*/ server/engine/src/main/resources/META-INF/native-image/
          rm server/engine/src/main/resources/META-INF/native-image/session-*/jni-config.json
        shell: bash
      - uses: ilammy/msvc-dev-cmd@v1.5.0
      - uses: microsoft/setup-msbuild@v1
      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 22.2.0
          native-image: true
      - name: Build with Maven
        working-directory: server
        run: mvn -e -B -Pnative -DskipTests clean package
        shell: powershell
      - name: Upload artifacts
        run: |
          mkdir -p staging/${{ env.target }}
          cp server/engine/target/*.exe staging/${{ env.target }}/
          cp server/engine/target/*.dll staging/${{ env.target }}/
          cp server/engine/target/*.txt staging/${{ env.target }}/
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: package-win
          path: staging/${{ env.target }}
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: logs
          path: server/engine/target/*.log

  buildOnMac:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: arm64
    runs-on: ${{ matrix.os }}
    needs: [generateNativeConfig]
    steps:
      - uses: actions/checkout@v3
      - shell: pwsh
        run: echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV
      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 22.2.0
          native-image: true
      - name: Retrieve native build configurations
        uses: actions/download-artifact@v3
        with:
          path: configuration
          name: configuration
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: configuration
      - name: Add graalVM configuration to server
        run: |
          cp -rp configuration/session-*/ server/engine/src/main/resources/META-INF/native-image/
          rm server/engine/src/main/resources/META-INF/native-image/jni-config.json
      - name: Build with Maven
        working-directory: server
        run: mvn -e -B -Pnative -DskipTests clean package
      - name: Run UPX
        uses: svenstaro/upx-action@v2
        with:
          file: server/engine/target/engine
          args: '-7'
      - name: Upload artifacts
        run: mkdir staging && cp server/engine/target/engine staging/${{ env.target }}
      - uses: actions/upload-artifact@v3
        with:
          name: package-macos
          path: staging
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: logs
          path: server/engine/target/*.log

  buildOnLinux:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
          - os: ubuntu-latest
            platform: linux
            arch: armhf
          - os: ubuntu-latest
            platform: alpine
            arch: x64
    runs-on: ${{ matrix.os }}
    needs: [generateNativeConfig]
    steps:
      - shell: pwsh
        run: echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV
      - uses: actions/checkout@v3
      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 22.2.0
          native-image: true
      - name: Retrieve native build configurations
        uses: actions/download-artifact@v3
        with:
          path: configuration
          name: configuration
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: configuration
      - name: Add graalVM configuration to server
        run: |
          cp -rp configuration/session-*/ server/engine/src/main/resources/META-INF/native-image/
          rm server/engine/src/main/resources/META-INF/native-image/session-*/jni-config.json
      - name: Build with Maven
        working-directory: server
        run: mvn -e -B -Pnative -Dagent=true -DskipTests clean package
      - name: Run UPX
        uses: crazy-max/ghaction-upx@v1.3.3
        with:
          version: latest
          file: server/engine/target/engine
          args: '-7'
      - name: Upload artifacts
        run: mkdir staging && cp server/engine/target/engine staging/${{ env.target }}
      - uses: actions/upload-artifact@v3
        with:
          name: package-linux
          path: staging
      - uses: actions/upload-artifact@v3
        with:
          name: jar
          path: server/engine/target/server.jar
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: logs
          path: server/engine/target/*.log

  tests:
    runs-on: windows-latest
    needs: [buildOnLinux, buildOnMac, buildOnWindows]
    defaults:
      run:
        shell: bash
    steps:
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '11.0.15'
          distribution: 'microsoft'
      - run: java -version
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: build client
        run: npm ci --ignore-scripts
        working-directory: clients/cobol-lsp-vscode-extension
      - name: postinstall
        run: npm run postinstall
        working-directory: clients/cobol-lsp-vscode-extension
      - name: Retrieve server jar
        uses: actions/download-artifact@v3
        with:
          path: staging
      - name: configure server jar
        working-directory: clients/cobol-lsp-vscode-extension
        run: "cp -R ../../staging/jar/* ./server/jar"
      - name: coverage
        run: npm run coverage
        working-directory: clients/cobol-lsp-vscode-extension
      - name: integration-test
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: npm --prefix clients/cobol-lsp-vscode-extension run test:integration
  buildVsixWithNativeSupport:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
            npm_config_arch: x64
          - os: windows-latest
            platform: win32
            arch: ia32
            npm_config_arch: ia32
          - os: windows-latest
            platform: win32
            arch: arm64
            npm_config_arch: arm
          - os: ubuntu-latest
            platform: linux
            arch: x64
            npm_config_arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            npm_config_arch: arm64
          - os: ubuntu-latest
            platform: linux
            arch: armhf
            npm_config_arch: arm
          - os: ubuntu-latest
            platform: alpine
            arch: x64
            npm_config_arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64
            npm_config_arch: x64
          - os: macos-latest
            platform: darwin
            arch: arm64
            npm_config_arch: arm64
    runs-on: ${{ matrix.os }}
    needs: [tests]
    steps:
      - uses: actions/checkout@v3
      - shell: pwsh
        run: echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: Retrieve native images
        uses: actions/download-artifact@v3
        with:
          path: staging
      - name: configure server jar
        working-directory: clients/cobol-lsp-vscode-extension
        run: "cp -R ../../staging/jar/* ./server/jar"
      - name: configure windows executable
        working-directory: clients/cobol-lsp-vscode-extension
        if: startsWith( matrix.os, 'windows')
        run: |
          cp ../../staging/package-win/${{ env.target }}/engine.build_artifacts.txt ./server/native
          cp ../../staging/package-win/${{ env.target }}/engine.exe ./server/windows
          cp ../../staging/package-win/${{ env.target }}/sunmscapi.dll ./server/windows
      - name: configure mac executable
        working-directory: clients/cobol-lsp-vscode-extension
        if: startsWith( matrix.os, 'mac')
        run: |
          cp -p ../../staging/package-macos/${{ env.target }} ./server/native
          chmod +x ./server/native/${{ env.target }}
      - name: configure linux executable
        working-directory: clients/cobol-lsp-vscode-extension
        if: startsWith( matrix.os, 'ubuntu')
        run: |
          cp -p ../../staging/package-linux/${{ env.target }} ./server/native
          chmod +x ./server/native/${{ env.target }}
      - name: build client
        run: npm ci
        working-directory: clients/cobol-lsp-vscode-extension
      - name: generate vsix for ${{ env.target }}
        working-directory: clients/cobol-lsp-vscode-extension
        run: |
          npm run package  --target ${{ env.target }}
          cp *.vsix ../../.
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.target }}
          path: '*.vsix'

#  native-build-test:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [windows-latest, macOS-latest, ubuntu-latest, ubuntu-22.04, windows-2019, macos-12]
#    needs: [buildOnWindows, buildOnMac, buildOnLinux]
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-node@v3
#        with:
#          node-version: 14
#      - name: Retrieve native images
#        uses: actions/download-artifact@v3
#        with:
#          path: staging
#      - name: configure windows executable
#        working-directory: tests/native-executable-tests
#        if: startsWith( matrix.os, 'windows')
#        run: |
#          cp ../../staging/package-win/engine.build_artifacts.txt ./server/windows
#          cp ../../staging/package-win/engine.exe ./server/windows
#          cp ../../staging/package-win/sunmscapi.dll ./server/windows
#      - name: configure mac executable
#        working-directory: tests/native-executable-tests
#        if: startsWith( matrix.os, 'mac')
#        run: |
#          cp -p ../../staging/package-macos/server-mac-amd64 ./server/mac
#          chmod +x ./server/mac/server-mac-amd64
#      - name: configure linux executable
#        working-directory: tests/native-executable-tests
#        if: startsWith( matrix.os, 'ubuntu')
#        run: |
#          cp -p ../../staging/package-linux/server ./server/linux
#          chmod +x ./server/linux/server
#      - name: build native executable test code
#        working-directory: tests/native-executable-tests
#        run: npm ci
#      - name: run native executable test code
#        working-directory: tests/native-executable-tests
#        run: npm run test
#  cypress-run:
#    runs-on: ubuntu-latest
#    needs: [build]
#    steps:
#      - shell: pwsh
#        run: echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV
#      - uses: actions/checkout@v3
#      - uses: actions/setup-node@v3
#        with:
#          node-version: 14
#      - name: Download vsix file
#        uses: actions/download-artifact@v3
#        with:
#          path: staging
#      - name: make cobol-lsp plugin folder
#        run: mkdir -p tests/theia/plugins
#      - name: Copy vsix file
#        run: cp staging/vsix-package/*.vsix tests/theia/plugins
#      - name: Up theia docker image
#        run:
#          # Run the docker commande
#          docker run -d -p 3000:3000 -v "/home/runner/work/che-che4z-lsp-for-cobol/che-che4z-lsp-for-cobol/tests/theia/plugins":/home/theia/plugins -v "/home/runner/work/che-che4z-lsp-for-cobol/che-che4z-lsp-for-cobol/tests/test_files/project":/home/project grianbrcom/theia-full:1.15.0
#      - name: up docker image
#        run: |
#          docker ps
#          rm -rf node_modules/ yarn.lock
#          cd tests
#          yarn cache clean
#          yarn install --frozen-lockfile
#          npm run ts:build
#      - name: Cypress run
#        uses: cypress-io/github-action@v2
#        with:
#          command: npm run cy:run:ci -- --env ide=theia
#          browser: chrome
#          headless: true
#          wait-on: 'http://localhost:3000'
#          working-directory: tests
#      - uses: actions/upload-artifact@v2
#        if: failure()
#        with:
#          name: cypress-screenshots
#          path: /home/runner/work/che-che4z-lsp-for-cobol/che-che4z-lsp-for-cobol/tests/cypress/screenshots/LSP/*/*
      # Test run video was always captured, so this action uses "always()" condition
      # - uses: actions/upload-artifact@v2
      #   if: always()
      #   with:
      #     name: cypress-videos
      #     path: cypress/videos

